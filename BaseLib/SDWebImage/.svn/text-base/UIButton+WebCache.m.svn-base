/*
 * This file is part of the SDWebImage package.
 * (c) Olivier Poitrey <rs@dailymotion.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

#import "UIButton+WebCache.h"
#import <objc/runtime.h>
#import <objc/message.h>

static char operationKey;

@implementation UIButton (WebCache)

#pragma mark Get ViewController of the UIButton

- (UIViewController*)viewController {
    for (UIView* next=self; next; next=next.superview) {
        if ([next.nextResponder isKindOfClass:[UIViewController class]]) {
            return (UIViewController*)next.nextResponder;
        }
    }
    return nil;
}

#pragma mark WebImage

////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - 按钮图

#pragma mark 基本

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:nil imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:nil];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:nil];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
                options:(SDWebImageOptions)options
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:options progress:nil completed:nil];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:ImageCutType_None options:0 progress:nil completed:nil];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
                cutType:(ImageCutType)cutType
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:0 progress:nil completed:nil];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
                cutType:(ImageCutType)cutType
                options:(SDWebImageOptions)options
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:nil completed:nil];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
                cutType:(ImageCutType)cutType
                options:(SDWebImageOptions)options
               progress:(SDWebImageDownloaderProgressBlock)progressBlock
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:nil completed:nil];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark 结束回调

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:nil imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
                cutType:(ImageCutType)cutType
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:0 progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
                cutType:(ImageCutType)cutType
                options:(SDWebImageOptions)options
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
                cutType:(ImageCutType)cutType
                options:(SDWebImageOptions)options
               progress:(SDWebImageDownloaderProgressBlock)progressBlock
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
       placeholderImage:(UIImage *)placeholder
                options:(SDWebImageOptions)options
               progress:(SDWebImageDownloaderProgressBlock)progressBlock
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:options progress:nil completed:completedBlock];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark 组件定位

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
                 module:(NSString *)module
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:module placeholderImage:nil imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
                 module:(NSString *)module
       placeholderImage:(UIImage *)placeholder
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:module placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
                 module:(NSString *)module
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:module placeholderImage:placeholder imageSize:imageSize cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
                 module:(NSString *)module
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
                cutType:(ImageCutType)cutType
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:module placeholderImage:placeholder imageSize:imageSize cutType:cutType options:0 progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
                 module:(NSString *)module
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
                cutType:(ImageCutType)cutType
                options:(SDWebImageOptions)options
              completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setImageWithURL:url forState:state module:module placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:nil completed:completedBlock];
}

- (void)setImageWithURL:(NSURL *)url
               forState:(UIControlState)state
                 module:(NSString *)module
       placeholderImage:(UIImage *)placeholder
              imageSize:(CGSize)imageSize
                cutType:(ImageCutType)cutType
                options:(SDWebImageOptions)options
               progress:(SDWebImageDownloaderProgressBlock)progressBlock
              completed:(SDWebImageCompletedBlock)completedBlock
{
    if (!url || ![url.absoluteString length]) {
        [self setImage:placeholder forState:state];
        return;
    }
    
    if (options & SDWebImageNoParse) {
        [self setImageWithParsedURL:url forState:state placeholderImage:placeholder module:module options:options progress:progressBlock completed:completedBlock];
        return;
    }
    
    //解析拼接URL
    NSURL *parsedURL = nil;
    Class URLParserClass = objc_getClass("TBCDNImageURLParser");
    if (URLParserClass) {
        parsedURL = ((id (*)(id, SEL, id, id, CGSize, CGSize, ImageCutType))objc_msgSend)(URLParserClass, NSSelectorFromString(@"parseImageURLForCDNURL:module:imageSize:viewSize:cutType:"), url, module, imageSize, self.frame.size, cutType);
    }
    
    parsedURL = parsedURL ?: url;
    if (parsedURL) {
        [self setImageWithParsedURL:parsedURL forState:state placeholderImage:placeholder module:module options:options progress:progressBlock completed:completedBlock];
    }
}

- (void)setImageWithParsedURL:(NSURL *)url
                     forState:(UIControlState)state
             placeholderImage:(UIImage *)placeholder
                       module:(NSString *)module
                      options:(SDWebImageOptions)options
                     progress:(SDWebImageDownloaderProgressBlock)progressBlock
                    completed:(SDWebImageCompletedBlock)completedBlock
{
    __weak __block UIButton *wself = self;
    [self setImageInnerMethodWithURL:url forState:state placeholderImage:placeholder module:module options:options progress:progressBlock completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) {
        if (completedBlock) {
            completedBlock(image, error, cacheType);
        }
        
        if (!error && !CGSizeEqualToSize(image.size, CGSizeZero)) {
            //渐显动画
            if (options & SDWebImageAnimating && cacheType != SDImageCacheTypeMemory) {
                wself.alpha = 0;
                [UIView animateWithDuration:0.3 delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^{
                    wself.alpha = 1;
                } completion:NULL];
            }
        }
        
        NSMutableDictionary   *userInfo = [NSMutableDictionary dictionary];
        [userInfo setObject:[NSString stringWithFormat:@"%ld x %ld", (long)image.size.width, (long)image.size.height] forKey:@"imageSize"];
        if (error) {
            [userInfo setObject:error forKey:@"error"];
        }
    }];
}

- (void)setImageInnerMethodWithURL:(NSURL *)url
                          forState:(UIControlState)state
                  placeholderImage:(UIImage *)placeholder
                            module:(NSString *)module
                           options:(SDWebImageOptions)options
                          progress:(SDWebImageDownloaderProgressBlock)progressBlock
                         completed:(SDWebImageCompletedBlock)completedBlock
{
    [self cancelCurrentImageLoad];
    
    if (!(options & SDWebImageKeepImageWhenRefreshing && self.currentImage)) {
        [self setImage:placeholder forState:state];
    }
    
    if (url) {
        __weak UIButton *wself = self;
        id <SDWebImageOperation> operation = [[SDWebImageManager sharedManager] downloadWithURL:url module:module imageSize:CGSizeZero cutType:ImageCutType_None options: options | SDWebImageNoParse progress:progressBlock completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished) {
            if (!wself) return;
            dispatch_main_sync_safe(^{
                __strong UIButton *sself = wself;
                if (!sself) return;
                if (image) {
                    [sself setImage:image forState:state];
                }
                if (completedBlock && finished) {
                    completedBlock(image, error, cacheType);
                }
            });
        }];
        objc_setAssociatedObject(self, &operationKey, operation, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - 背景图

#pragma mark 基本

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:nil imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:nil];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:nil];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                          options:(SDWebImageOptions)options
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:options progress:nil completed:nil];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:ImageCutType_None options:0 progress:nil completed:nil];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                          cutType:(ImageCutType)cutType
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:0 progress:nil completed:nil];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                          cutType:(ImageCutType)cutType
                          options:(SDWebImageOptions)options
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:nil completed:nil];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                          cutType:(ImageCutType)cutType
                          options:(SDWebImageOptions)options
                         progress:(SDWebImageDownloaderProgressBlock)progressBlock
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:progressBlock completed:nil];
}


////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark 结束回调

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:nil imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                          cutType:(ImageCutType)cutType
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:0 progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                          cutType:(ImageCutType)cutType
                          options:(SDWebImageOptions)options
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                          cutType:(ImageCutType)cutType
                          options:(SDWebImageOptions)options
                         progress:(SDWebImageDownloaderProgressBlock)progressBlock
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:progressBlock completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                 placeholderImage:(UIImage *)placeholder
                          options:(SDWebImageOptions)options
                         progress:(SDWebImageDownloaderProgressBlock)progressBlock
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:TBCDNImageModuleDefault placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:options progress:progressBlock completed:completedBlock];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark 组件定位

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                           module:(NSString *)module
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:module placeholderImage:nil imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                           module:(NSString *)module
                 placeholderImage:(UIImage *)placeholder
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:module placeholderImage:placeholder imageSize:CGSizeZero cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                           module:(NSString *)module
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:module placeholderImage:placeholder imageSize:imageSize cutType:ImageCutType_None options:0 progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                           module:(NSString *)module
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                          cutType:(ImageCutType)cutType
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:module placeholderImage:placeholder imageSize:imageSize cutType:cutType options:0 progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                           module:(NSString *)module
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                          cutType:(ImageCutType)cutType
                          options:(SDWebImageOptions)options
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    [self setBackgroundImageWithURL:url forState:state module:module placeholderImage:placeholder imageSize:imageSize cutType:cutType options:options progress:nil completed:completedBlock];
}

- (void)setBackgroundImageWithURL:(NSURL *)url
                         forState:(UIControlState)state
                           module:(NSString *)module
                 placeholderImage:(UIImage *)placeholder
                        imageSize:(CGSize)imageSize
                          cutType:(ImageCutType)cutType
                          options:(SDWebImageOptions)options
                         progress:(SDWebImageDownloaderProgressBlock)progressBlock
                        completed:(SDWebImageCompletedBlock)completedBlock
{
    if (!url || ![url.absoluteString length]) {
        [self setBackgroundImage:placeholder forState:state];
        return;
    }
    
    if (options & SDWebImageNoParse) {
        [self setBackgroundImageWithParsedURL:url forState:state placeholderImage:placeholder module:module options:options progress:progressBlock completed:completedBlock];
        return;
    }
    
    //解析拼接URL
    NSURL *parsedURL = nil;
    Class URLParserClass = objc_getClass("TBCDNImageURLParser");
    if (URLParserClass) {
        parsedURL = ((id (*)(id, SEL, id, id, CGSize, CGSize, ImageCutType))objc_msgSend)(URLParserClass, NSSelectorFromString(@"parseImageURLForCDNURL:module:imageSize:viewSize:cutType:"), url, module, imageSize, self.frame.size, cutType);
    }
    
    parsedURL = parsedURL ?: url;
    if (parsedURL) {
        [self setBackgroundImageWithParsedURL:parsedURL forState:state placeholderImage:placeholder module:module options:options progress:progressBlock completed:completedBlock];
    }
    
}

- (void)setBackgroundImageWithParsedURL:(NSURL *)url
                               forState:(UIControlState)state
                       placeholderImage:(UIImage *)placeholder
                                 module:(NSString *)module
                                options:(SDWebImageOptions)options
                               progress:(SDWebImageDownloaderProgressBlock)progressBlock
                              completed:(SDWebImageCompletedBlock)completedBlock
{
    __weak __block UIButton *wself = self;
    [self setBackgroundImageInnerMethodWithURL:url forState:state placeholderImage:placeholder module:module options:options progress:progressBlock completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) {
        if (completedBlock) {
            completedBlock(image, error, cacheType);
        }
        
        if (!error && !CGSizeEqualToSize(image.size, CGSizeZero)) {
            //渐显动画
            if (options & SDWebImageAnimating && cacheType != SDImageCacheTypeMemory) {
                wself.alpha = 0;
                [UIView animateWithDuration:0.3 delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^{
                    wself.alpha = 1;
                } completion:NULL];
            }
        }
        
        NSMutableDictionary   *userInfo = [NSMutableDictionary dictionary];
        [userInfo setObject:[NSString stringWithFormat:@"%ld x %ld", (long)image.size.width, (long)image.size.height] forKey:@"imageSize"];
        if (error) {
            [userInfo setObject:error forKey:@"error"];
        }
    }];
}

- (void)setBackgroundImageInnerMethodWithURL:(NSURL *)url
                                    forState:(UIControlState)state
                            placeholderImage:(UIImage *)placeholder
                                      module:(NSString *)module
                                     options:(SDWebImageOptions)options
                                    progress:(SDWebImageDownloaderProgressBlock)progressBlock
                                   completed:(SDWebImageCompletedBlock)completedBlock
{
    [self cancelCurrentImageLoad];
    
    [self setBackgroundImage:placeholder forState:state];
    
    if (url) {
        __weak UIButton *wself = self;
        id <SDWebImageOperation> operation = [[SDWebImageManager sharedManager] downloadWithURL:url module:module imageSize:CGSizeZero cutType:ImageCutType_None options: options | SDWebImageNoParse progress:progressBlock completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished) {
            if (!wself) return;
            dispatch_main_sync_safe(^{
                __strong UIButton *sself = wself;
                if (!sself) return;
                if (image) {
                    [sself setBackgroundImage:image forState:state];
                }
                if (completedBlock && finished) {
                    completedBlock(image, error, cacheType);
                }
            });
        }];
        objc_setAssociatedObject(self, &operationKey, operation, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    }
}

- (void)cancelCurrentImageLoad
{
    // Cancel in progress downloader from queue
    id <SDWebImageOperation> operation = objc_getAssociatedObject(self, &operationKey);
    if (operation) {
        [operation cancel];
        objc_setAssociatedObject(self, &operationKey, nil, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    }
}

@end
