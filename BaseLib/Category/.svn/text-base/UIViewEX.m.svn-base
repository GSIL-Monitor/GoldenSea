//
//  UIViewEX.m
//

#import "UIViewEX.h"
#import <QuartzCore/QuartzCore.h>
#import "UIDeviceEX.h"
#import "CommonMacros.h"

@implementation UIView (EX)


- (UIView*)descendantOrSelfWithClass:(Class)cls{
    if ([self isKindOfClass:cls])
        return self;
    
    for (UIView* child in self.subviews) {
        
        UIView* it = [child descendantOrSelfWithClass:cls];
        if (it)
            return it;
    }
    
    return nil;
}

- (UIImage *)captureImageInRect:(CGRect)rect
{
    return [self captureImageInRect:rect opaque:NO];
}

- (UIImage *)captureImageInRect:(CGRect)rect opaque:(BOOL)opaque
{
    UIGraphicsBeginImageContextWithOptions(self.bounds.size, opaque, 0.0);
    
    [self.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage * fullImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    if (CGRectEqualToRect(rect, CGRectMake(0, 0, fullImage.size.width, fullImage.size.height))) {
        return fullImage;
    }
    
    float scale = [[UIScreen mainScreen] scale];
    CGRect scaledRect = CGRectMake(rect.origin.x*scale, rect.origin.y*scale, rect.size.width*scale, rect.size.height*scale);
    CGImageRef imgRef = CGImageCreateWithImageInRect(fullImage.CGImage, scaledRect);
    UIImage * image = [UIImage imageWithCGImage:imgRef scale:scale orientation:UIImageOrientationUp];
    CGImageRelease(imgRef);
    
    return image;
}

- (UIViewController*)nearestNavController {
    for (UIView* next = [self superview]; next; next = next.superview) {    
        UIResponder* nextResponder = [next nextResponder];     
        if ([nextResponder isKindOfClass:[UINavigationController class]]) {
            return (UIViewController*)nextResponder;
        }   
    }
    return nil; 
}

@end


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Copyright 2009-2011 Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@implementation UIView (TTCategory)


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)left {
    return self.frame.origin.x;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setLeft:(CGFloat)x {
    CGRect frame = self.frame;
    frame.origin.x = x;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)top {
    return self.frame.origin.y;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setTop:(CGFloat)y {
    CGRect frame = self.frame;
    frame.origin.y = y;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)right {
    return self.frame.origin.x + self.frame.size.width;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setRight:(CGFloat)right {
    CGRect frame = self.frame;
    frame.origin.x = right - frame.size.width;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)bottom {
    return self.frame.origin.y + self.frame.size.height;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setBottom:(CGFloat)bottom {
    CGRect frame = self.frame;
    frame.origin.y = bottom - frame.size.height;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)centerX {
    return self.center.x;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setCenterX:(CGFloat)centerX {
    self.center = CGPointMake(centerX, self.center.y);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)centerY {
    return self.center.y;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setCenterY:(CGFloat)centerY {
    self.center = CGPointMake(self.center.x, centerY);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)width {
    return self.frame.size.width;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setWidth:(CGFloat)width {
    CGRect frame = self.frame;
    frame.size.width = width;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)height {
    return self.frame.size.height;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setHeight:(CGFloat)height {
    CGRect frame = self.frame;
    frame.size.height = height;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)ttScreenX {
    CGFloat x = 0.0f;
    for (UIView* view = self; view; view = view.superview) {
        x += view.left;
    }
    return x;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)ttScreenY {
    CGFloat y = 0.0f;
    for (UIView* view = self; view; view = view.superview) {
        y += view.top;
    }
    return y;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)screenViewX {
    CGFloat x = 0.0f;
    for (UIView* view = self; view; view = view.superview) {
        x += view.left;
        
        if ([view isKindOfClass:[UIScrollView class]]) {
            UIScrollView* scrollView = (UIScrollView*)view;
            x -= scrollView.contentOffset.x;
        }
    }
    
    return x;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGFloat)screenViewY {
    CGFloat y = 0;
    for (UIView* view = self; view; view = view.superview) {
        y += view.top;
        
        if ([view isKindOfClass:[UIScrollView class]]) {
            UIScrollView* scrollView = (UIScrollView*)view;
            y -= scrollView.contentOffset.y;
        }
    }
    return y;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGRect)screenFrame {
    return CGRectMake(self.screenViewX, self.screenViewY, self.width, self.height);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGPoint)origin {
    return self.frame.origin;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setOrigin:(CGPoint)origin {
    CGRect frame = self.frame;
    frame.origin = origin;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGSize)size {
    return self.frame.size;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)setSize:(CGSize)size {
    CGRect frame = self.frame;
    frame.size = size;
    self.frame = frame;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (UIView*)descendantOrSelfWithClass:(Class)cls {
    if ([self isKindOfClass:cls])
        return self;
    
    for (UIView* child in self.subviews) {
        UIView* it = [child descendantOrSelfWithClass:cls];
        if (it)
            return it;
    }
    
    return nil;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (UIView*)ancestorOrSelfWithClass:(Class)cls {
    if ([self isKindOfClass:cls]) {
        return self;
        
    } else if (self.superview) {
        return [self.superview ancestorOrSelfWithClass:cls];
        
    } else {
        return nil;
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
- (void)removeAllSubviews {
    while (self.subviews.count) {
        UIView* child = self.subviews.lastObject;
        [child removeFromSuperview];
    }
}



///////////////////////////////////////////////////////////////////////////////////////////////////
- (CGPoint)offsetFromView:(UIView*)otherView {
    CGFloat x = 0.0f, y = 0.0f;
    for (UIView* view = self; view && view != otherView; view = view.superview) {
        x += view.left;
        y += view.top;
    }
    return CGPointMake(x, y);
}

@end

@implementation UIView (IOS7Path)

- (UIColor *)stackedBackgroundColor
{
    CGFloat red = .0, green = .0, blue = .0, alpha = .0;
    UIView *view = self;
    while (view && alpha < 1.0f) {
        if (view.backgroundColor) {
            CGFloat cRed = 0;
            CGFloat cGreen = 0;
            CGFloat cBlue = 0;
            CGFloat cAlpha = 0;
            
            [view.backgroundColor getRed:&cRed green:&cGreen blue:&cBlue alpha:&cAlpha];
            
            if (cAlpha > .0f) {
                red = red * alpha + cRed * cAlpha;
                green = green * alpha + cGreen * cAlpha;
                blue = blue * alpha + cBlue * cAlpha;
                alpha += (1.0f - alpha) * cAlpha;
                if (cAlpha == 1.0f) break;
            }
        }
        view = view.superview;
    }
    if (alpha == .0) {
        return [UIColor whiteColor];
    }
    return [UIColor colorWithRed:red green:green blue:blue alpha:1.0];
}

@end

@implementation UIView (Util)

- (UIViewController *)viewController;{
    id nextResponder = [self nextResponder];
    if ([nextResponder isKindOfClass:[UIViewController class]]) {
        return nextResponder;
    }
    else if([nextResponder isKindOfClass:[UIView class]]){
        return [(UIView*)nextResponder viewController];
    }
    else {
        return nil;
    }
}

-(id)initWithOffsetX:(CGFloat)x offsetY:(CGFloat)y superView:(UIView *)view
{
    GSAssert(x<view.size.width/2);
    GSAssert(y<view.size.height/2);

    
    CGFloat offsetX = x<view.size.width/2?x:0;
    CGFloat offsetY = y<view.size.height/2?y:0;
    CGFloat startX = view.size.width-offsetX;
    CGFloat startY = view.size.height-offsetY;
    
    return [self initWithFrame:CGRectMake(startX, startY, view.size.width-2*offsetX, offsetY)];
}

-(void)toCenter:(BOOL)changeX
{
    CGFloat centerX = self.center.x;
    CGFloat centerY = self.center.y;
    if(changeX){
        self.center = CGPointMake(self.superview.frame.size.width/2, centerY);
    }else{
        self.center = CGPointMake(centerX, self.superview.frame.size.height/2);
    }
    
}

//notice that call this function after add to father view.
-(void)makeCenter
{
    self.center = CGPointMake(self.superview.frame.size.width/2, self.superview.frame.size.height/2);

}

-(void)makeXCenter
{
    [self toCenter:YES];
}

-(void)makeYCenter
{
    [self toCenter:NO];
}

- (UIView *)addXLine:(CGRect)rect color:(UIColor *)color;
{
    UIView *lineView = nil;
    
    
    CGFloat lineWidth = 0.5f;
    if ([[UIDevice currentDevice] isRetinaScreen]) {
        lineView = [[UIView alloc] initWithFrame:CGRectMake(rect.origin.x, rect.origin.y - lineWidth, rect.size.width, lineWidth)];
    } else {
        lineWidth += lineWidth;
        lineView = [[UIView alloc] initWithFrame:CGRectMake(rect.origin.x, rect.origin.y - lineWidth, SCREEN_WIDTH, lineWidth)];
    }
    lineView.backgroundColor = color;
    
    [self addSubview:lineView];
    
    return lineView;
}

- (UIView *)addYLine:(CGRect)rect color:(UIColor *)color;
{
    UIView *lineView = nil;
    
    CGFloat lineWidth = 0.5f;
    if ([[UIDevice currentDevice] isRetinaScreen]) {
    } else {
        lineWidth += lineWidth;
    }
    lineView = [[UIView alloc] initWithFrame:CGRectMake(rect.origin.x-lineWidth, rect.origin.y ,  lineWidth,rect.size.height)];

    lineView.backgroundColor = color;
    
    [self addSubview:lineView];
    
    return lineView;
}

- (UIView *)addOnePixelLine:(CGRect)rect color:(UIColor *)color
{
    UIView *lineView = nil;
    
    if ([[UIDevice currentDevice] isRetinaScreen]) {
        lineView = [[UIView alloc] initWithFrame:CGRectMake(rect.origin.x, rect.origin.y - 0.5, rect.size.width, 0.5)];
    } else {
        lineView = [[UIView alloc] initWithFrame:CGRectMake(rect.origin.x, rect.origin.y - 1, SCREEN_WIDTH, 1)];
    }
    lineView.backgroundColor = color;
    
    [self addSubview:lineView];
    
    return lineView;
}

+ (CGFloat)getOnePixelLineHeight
{
    CGFloat height = 0;
    
    if ([[UIDevice currentDevice] isRetinaScreen]) {
        height = 0.5;
    } else {
        height = 1;
    }
    
    return height;
}

+ (void)addFadeAnimation:(UIView *)view
{
    CATransition * trans = [[CATransition alloc] init];
    trans.type = kCATransitionFade;
    trans.duration = 0.3;
    trans.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
    [view.layer addAnimation:trans forKey:nil];
}

@end