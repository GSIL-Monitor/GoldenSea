//
//  NSDateEX.m
//

#import "NSDateEX.h"

@implementation NSDate (EX) 

static BOOL g_monday_as_first = NO;

+ (int)dayOfYear:(int)year month:(int)month day:(int)day{
    if(month < 0 || month > 12){
        return INT32_MAX;
    }
    
    int sinmonth1[]={31,28,31,30,31,30,31,31,30,31,30,31};
    int sinmonth2[]={31,29,31,30,31,30,31,31,30,31,30,31}; 
    int i,k,days=0,dayses=0;
    
    if( ((year%4==0) && (year%100!=0)) || ((year%4==0)&& (year%400==0)) ){
        k=1; 
    }
    else{
        k=0; 
    }
    switch(k) 
    {
        case   0: 
            for(i=0;i <month-1;i++)
            {
                days=days+sinmonth1[i];
            } 
            dayses=days+day; 
            break; 
        case   1: 
            for(i=0;i <month-1;i++)
            {
                days=days+sinmonth2[i];
            }
            dayses=days+day; 
            break; 
    } 
    return dayses;
}

+ (NSDateComponents *)toChinaComponents:(NSDate *)gmDate{
    
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar]; 
    //香港时间 同北京时间
    //[calendar setTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"GMT"]];
    [calendar setTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"HKT"]];
    
    NSInteger unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit | NSWeekdayCalendarUnit |  
    NSHourCalendarUnit | NSMinuteCalendarUnit | NSSecondCalendarUnit;  
    
    
    NSDateComponents * comps = [calendar components:unitFlags fromDate:gmDate]; 
    return comps;
}


- (BOOL)isSameDayWith:(NSDate *)cmpDate
{
    NSCalendar *calendar = [NSCalendar currentCalendar];
    
    NSInteger unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit;
    
    NSDateComponents *selfComps = [calendar components:unitFlags fromDate:self];
    NSDateComponents *otherComps = [calendar components:unitFlags fromDate:cmpDate];
    
    return (selfComps.year == otherComps.year) && (selfComps.month == otherComps.month) && (selfComps.day == otherComps.day);
}

+ (void)setMondayAsFirst:(BOOL)value
{
    g_monday_as_first = value;
}

-(int)year {
    NSCalendar *gregorian = [[NSCalendar alloc]
                             initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *components = [gregorian components:NSYearCalendarUnit fromDate:self];
    return (int)[components year];
}


-(int)month {
    NSCalendar *gregorian = [[NSCalendar alloc]
                             initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *components = [gregorian components:NSMonthCalendarUnit fromDate:self];
    return (int)[components month];
}

-(int)day {
    NSCalendar *gregorian = [[NSCalendar alloc]
                             initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *components = [gregorian components:NSDayCalendarUnit fromDate:self];
    return (int)[components day];
}

-(int)firstWeekDayInMonth {
    NSCalendar *gregorian = [[NSCalendar alloc]
                             initWithCalendarIdentifier:NSGregorianCalendar];
    g_monday_as_first ? [gregorian setFirstWeekday:2] : [gregorian setFirstWeekday:1];
    //[gregorian setLocale:[[NSLocale alloc] initWithLocaleIdentifier:@"nl_NL"]];
    
    //Set date to first of month
    NSDateComponents *comps = [gregorian components:NSYearCalendarUnit | NSMonthCalendarUnit |  NSDayCalendarUnit fromDate:self];
    [comps setDay:1];
    NSDate *newDate = [gregorian dateFromComponents:comps];
    
    return (int)[gregorian ordinalityOfUnit:NSWeekdayCalendarUnit inUnit:NSWeekCalendarUnit forDate:newDate];
}

-(NSDate *)offsetMonth:(int)numMonths {
    NSCalendar *gregorian = [[NSCalendar alloc]
                             initWithCalendarIdentifier:NSGregorianCalendar];
    g_monday_as_first ? [gregorian setFirstWeekday:2] : [gregorian setFirstWeekday:1];
    
    NSDateComponents *offsetComponents = [[NSDateComponents alloc] init];
    [offsetComponents setMonth:numMonths];
    //[offsetComponents setHour:1];
    //[offsetComponents setMinute:30];
    return [gregorian dateByAddingComponents:offsetComponents toDate:self options:0];
}

-(NSDate *)offsetHours:(int)hours {
    NSCalendar *gregorian = [[NSCalendar alloc]
                             initWithCalendarIdentifier:NSGregorianCalendar];
    g_monday_as_first ? [gregorian setFirstWeekday:2] : [gregorian setFirstWeekday:1];
    
    NSDateComponents *offsetComponents = [[NSDateComponents alloc] init];
    //[offsetComponents setMonth:numMonths];
    [offsetComponents setHour:hours];
    //[offsetComponents setMinute:30];
    return [gregorian dateByAddingComponents:offsetComponents toDate:self options:0];
}

-(NSDate *)offsetDay:(int)numDays {
    NSCalendar *gregorian = [[NSCalendar alloc]
                             initWithCalendarIdentifier:NSGregorianCalendar];
    g_monday_as_first ? [gregorian setFirstWeekday:2] : [gregorian setFirstWeekday:1];
    
    NSDateComponents *offsetComponents = [[NSDateComponents alloc] init];
    [offsetComponents setDay:numDays];
    return [gregorian dateByAddingComponents:offsetComponents toDate:self options:0];
}

-(int)numDaysInMonth {
    NSCalendar *cal = [NSCalendar currentCalendar];
    NSRange rng = [cal rangeOfUnit:NSDayCalendarUnit inUnit:NSMonthCalendarUnit forDate:self];
    NSUInteger numberOfDaysInMonth = rng.length;
    return (int)numberOfDaysInMonth;
}

+(NSDate *)dateStartOfDay:(NSDate *)date {
    NSCalendar *gregorian = [[NSCalendar alloc]
                             initWithCalendarIdentifier:NSGregorianCalendar];
    
    NSDateComponents *components =
    [gregorian components:(NSYearCalendarUnit | NSMonthCalendarUnit |
                           NSDayCalendarUnit) fromDate: date];
    return [gregorian dateFromComponents:components];
}

+(NSDate *)dateStartOfWeek {
    NSCalendar *gregorian = [[NSCalendar alloc]
                             initWithCalendarIdentifier:NSGregorianCalendar];
    g_monday_as_first ? [gregorian setFirstWeekday:2] : [gregorian setFirstWeekday:1];
    
    NSDateComponents *components = [[NSCalendar currentCalendar] components:NSWeekdayCalendarUnit fromDate:[NSDate date]];
    
    NSDateComponents *componentsToSubtract = [[NSDateComponents alloc] init];
    [componentsToSubtract setDay: - ((([components weekday] - [gregorian firstWeekday])
                                      + 7 ) % 7)];
    NSDate *beginningOfWeek = [gregorian dateByAddingComponents:componentsToSubtract toDate:[NSDate date] options:0];
    
    NSDateComponents *componentsStripped = [gregorian components: (NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit)
                                                        fromDate: beginningOfWeek];
    
    //gestript
    beginningOfWeek = [gregorian dateFromComponents: componentsStripped];
    
    return beginningOfWeek;
}

+(NSDate *)dateEndOfWeek {
    NSCalendar *gregorian =[[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    
    NSDateComponents *components = [[NSCalendar currentCalendar] components:NSWeekdayCalendarUnit fromDate:[NSDate date]];
    
    
    NSDateComponents *componentsToAdd = [[NSDateComponents alloc] init];
    [componentsToAdd setDay: + (((([components weekday] - [gregorian firstWeekday])
                                  + 7 ) % 7))+6];
    NSDate *endOfWeek = [gregorian dateByAddingComponents:componentsToAdd toDate:[NSDate date] options:0];
    
    NSDateComponents *componentsStripped = [gregorian components: (NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit)
                                                        fromDate: endOfWeek];
    
    //gestript
    endOfWeek = [gregorian dateFromComponents: componentsStripped];
    return endOfWeek;
}

+(NSString*)weekdayName:(int)weekday
{
    const NSString* chineseNums[] = {@"", @"日", @"一", @"二", @"三", @"四", @"五", @"六"};
    if (weekday >= 1 && weekday <= 7)
    {
        return [NSString stringWithFormat:@"周%@", chineseNums[weekday]];
    }
    else
    {
        return @"";
    }
}

- (NSString*)dateDescription
{
    NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents* comps = [gregorian components:NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit | NSWeekdayCalendarUnit fromDate:self];
    return [NSString stringWithFormat:@"%ld-%02ld-%02ld（%@）", (long)[comps year], (long)[comps month], (long)[comps day], [NSDate weekdayName:(int)[comps weekday]]];
}

- (NSString *)dateDescriptionShortVersion
{
    NSTimeInterval now = [[NSDate date] timeIntervalSince1970];
    
    NSTimeInterval seconds = [self timeIntervalSince1970];
    
    NSString *ret = nil;
    if (now - seconds < 60){
        ret = @"刚刚";
    }
    else if (now - seconds < 3600){
        // 一小时之内,显示分钟
        int min = (now-seconds)/60;
        ret = [NSString stringWithFormat:@"%d分钟前", min];
    }
    else if (now - seconds < 24*3600){
        // 一天之内,显示小时
        int h = (now-seconds)/3600;
        ret = [NSString stringWithFormat:@"%d小时前", h];
    }
    else{
        // 显示日期
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        [formatter setDateFormat:@"MM-dd"];
        
        ret = [formatter stringFromDate:[NSDate dateWithTimeIntervalSince1970:seconds]];
    }
    
    return ret;
}

+ (void)extractComponentsFromYMD:(NSString*)source year:(int*)year month:(int*)month day:(int*)day
{
    NSArray* components = [source componentsSeparatedByString:@"-"];
    if(components.count >= 1)
    {
        *year = [components[0] intValue];
    }
    if(components.count >= 2)
    {
        *month = [components[1] intValue];
    }
    if(components.count >= 3)
    {
        *day = [components[2] intValue];
    }
}

+ (NSDate*)convertYMDFormatToDate:(NSString*)source
{
    int year, month, day;
    [NSDate extractComponentsFromYMD:source year:&year month:&month day:&day];
    
    NSCalendar* gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    [gregorian setTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"HKT"]]; //香港时间 同北京时间
    NSDateComponents* calendarComponents = [gregorian components:NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit fromDate:[NSDate date]];
    [calendarComponents setYear:year];
    [calendarComponents setMonth:month];
    [calendarComponents setDay:day];
    return [gregorian dateFromComponents:calendarComponents];
}

#pragma mark - 双十一判断
+ (BOOL)isDoubleEleven:(const long )time{
    BOOL isDouble = NO;
    NSDate * gmDate = [NSDate dateWithTimeIntervalSince1970:time];
    NSDateComponents * comps = [NSDate toChinaComponents:gmDate];
    
    int year = (int)[comps year];
    int month = (int)[comps month];
    int day = (int)[comps day];
    
    if(year == 2013 && month == 11 && day == 11){
        isDouble = YES;
    }
    
    return isDouble;
}

+ (int)numberOfDayToDoubleEleven:(const long)time{
    int number = 0;
    
    NSDate * gmDate = [NSDate dateWithTimeIntervalSince1970:time];
    
    NSDateComponents * comps = [NSDate toChinaComponents:gmDate];
    
    int year= (int)[comps year];
    int month = (int)[comps month];
    int day = (int)[comps day];
    
    int dayOfYearNow = [NSDate dayOfYear:year month:month day:day];
    int dayOfYear11 = [NSDate dayOfYear:2013 month:11 day:11];
    
    number = dayOfYear11 - dayOfYearNow;
    
    return number;
}

+ (NSDate*)convertTimeZone8yyyyMMddHHmmssFormatToDate:(NSString*)source
{
    // 20130925000000
    if ([source length] != 14)
    {
        return nil;
    }
    int year = [[source substringToIndex:4] intValue];
    int month = [[source substringWithRange:NSMakeRange(4, 2)] intValue];
    int day = [[source substringWithRange:NSMakeRange(6, 2)] intValue];
    int hour = [[source substringWithRange:NSMakeRange(8, 2)] intValue];
    int minute = [[source substringWithRange:NSMakeRange(10, 2)] intValue];
    int second = [[source substringWithRange:NSMakeRange(12, 2)] intValue];
    
    NSCalendar* calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    [calendar setTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"HKT"]]; //香港时间 同北京时间
    
    NSInteger unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit | NSHourCalendarUnit | NSMinuteCalendarUnit | NSSecondCalendarUnit;
    NSDateComponents* comps = [calendar components:unitFlags fromDate:[NSDate date]];
    [comps setYear:year];
    [comps setMonth:month];
    [comps setDay:day];
    [comps setHour:hour];
    [comps setMinute:minute];
    [comps setSecond:second];
    return [calendar dateFromComponents:comps];
}

+ (NSString*)countdownText:(NSTimeInterval)fireDate currentDate:(NSTimeInterval)currentDate fired:(BOOL*)fired
{
    if (currentDate <= fireDate)
    {
        if (fired)
            *fired = NO;
        
        int64_t gap = (int64_t)(fireDate - currentDate);
        int64_t day = gap / 86400;
        int64_t hour = (gap % 86400) / 3600;
        int64_t minute = (gap % 3600) / 60;
        int64_t second = gap % 60;
        return day > 0 ? [NSString stringWithFormat:@"%lld天%02lld:%02lld:%02lld", day, hour, minute, second] : [NSString stringWithFormat:@"%02lld:%02lld:%02lld", hour, minute, second];
    }
    else if (fired)
    {
        *fired = YES;
    }
    return @"00:00:00";
}

//NSDate+Formatter
- (NSString*)stringWithFormat:(NSString*)fmt {
    //    static NSDateFormatter *fmtter;
    //
    //    if (fmtter == nil) {
    //        fmtter = [[NSDateFormatter alloc] init];
    //    }
    
    NSMutableDictionary *dictionary = [[NSThread currentThread] threadDictionary];
    NSDateFormatter *fmtter = [dictionary objectForKey:@"TBDateFormater"];
    
    if (fmtter == nil) {
        fmtter = [[NSDateFormatter alloc] init];
        [dictionary setObject:fmtter forKey:@"TBDateFormater"];
    }
    
    if (fmt == nil || [fmt isEqualToString:@""]) {
        fmt = @"HH:mm:ss";
    }
    
    [fmtter setDateFormat:fmt];
    
    return [fmtter stringFromDate:self];
}

+ (NSDate*)dateFromString:(NSString*)str withFormat:(NSString*)fmt {
    //    static NSDateFormatter *fmtter;
    //
    //    if (fmtter == nil) {
    //        fmtter = [[NSDateFormatter alloc] init];
    //    }
    
    NSMutableDictionary *dictionary = [[NSThread currentThread] threadDictionary];
    NSDateFormatter *fmtter = [dictionary objectForKey:@"TBDateFormater"];
    
    if (fmtter == nil) {
        fmtter = [[NSDateFormatter alloc] init];
        [dictionary setObject:fmtter forKey:@"TBDateFormater"];
    }
    
    if (fmt == nil || [fmt isEqualToString:@""]) {
        fmt = @"HH:mm:ss";
    }
    
    [fmtter setDateFormat:fmt];
    
    return [fmtter dateFromString:str];
}


+ (NSDate *)dateFromString:(NSString*)str withFormat:(NSString*)fmt locale:(NSLocale *)locale {
    //    static NSDateFormatter *fmtter;
    //
    //    if (fmtter == nil) {
    //        fmtter = [[NSDateFormatter alloc] init];
    //    }
    
    NSMutableDictionary *dictionary = [[NSThread currentThread] threadDictionary];
    NSDateFormatter *fmtter = [dictionary objectForKey:@"TBDateFormater"];
    
    if (fmtter == nil) {
        fmtter = [[NSDateFormatter alloc] init] ;
        [dictionary setObject:fmtter forKey:@"TBDateFormater"];
    }
    
    if (fmt == nil || [fmt isEqualToString:@""]) {
        fmt = @"HH:mm:ss";
    }
    
    [fmtter setDateFormat:fmt];
    if (locale != nil) {
        [fmtter setLocale:locale];
    }
    
    return [fmtter dateFromString:str];
}

- (NSDate *)dateByAddingDays:(NSInteger)days months:(NSInteger)months years:(NSInteger)years
{
    NSDateComponents *c = [[NSDateComponents alloc] init] ;
    c.year = years;
    c.month = months;
    c.day = days;
    return [[NSCalendar currentCalendar] dateByAddingComponents:c toDate:self options:0];
}


-(BOOL) isLaterThanOrEqualTo:(NSDate*)date {
    return !([self compare:date] == NSOrderedAscending);
}

-(BOOL) isEarlierThanOrEqualTo:(NSDate*)date {
    return !([self compare:date] == NSOrderedDescending);
}
-(BOOL) isLaterThan:(NSDate*)date {
    return ([self compare:date] == NSOrderedDescending);
    
}
-(BOOL) isEarlierThan:(NSDate*)date {
    return ([self compare:date] == NSOrderedAscending);
}

@end
