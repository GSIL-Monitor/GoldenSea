//
//  NSString+HTMLEntities.m
//

#import "NSString+HTMLEntities.h"

@implementation NSString (TBSDKHHYLEntities)
static NSString * const codeMap[][2] = {
    {@"&iexcl;",    @"¡"},  {@"&laquo;",    @"«"},  {@"&raquo;",    @"»"},  {@"&lsaquo;",   @"‹"},
    {@"&rsaquo;",   @"›"},  {@"&sbquo;",    @"‚"},  {@"&bdquo;",    @"„"},  {@"&ldquo;",    @"“"},
    {@"&rdquo;",    @"”"},  {@"&lsquo;",    @"‘"},  {@"&rsquo;",    @"’"},  {@"&cent;",     @"¢"},
    {@"&pound;",    @"£"},  {@"&yen;",      @"¥"},  {@"&euro;",     @"€"},  {@"&curren;",   @"¤"},
    {@"&fnof;",     @"ƒ"},  {@"&gt;",       @">"},  {@"&lt;",       @"<"},  {@"&divide;",   @"÷"},
    {@"&deg;",      @"°"},  {@"&not;",      @"¬"},  {@"&plusmn;",   @"±"},  {@"&micro;",    @"µ"},
    {@"&amp;",      @"&"},  {@"&reg;",      @"®"},  {@"&copy;",     @"©"},  {@"&trade;",    @"™"},
    {@"&bull;",     @"•"},  {@"&middot;",   @"·"},  {@"&sect;",     @"§"},  {@"&ndash;",    @"–"},
    {@"&mdash;",    @"—"},  {@"&dagger;",   @"†"},  {@"&Dagger;",   @"‡"},  {@"&loz;",      @"◊"},
    {@"&uarr;",     @"↑"},  {@"&darr;",     @"↓"},  {@"&larr;",     @"←"},  {@"&rarr;",     @"→"},
    {@"&harr;",     @"↔"},  {@"&iquest;",   @"¿"},  {@"&nbsp;",     @" "},  {@"&quot;",     @"\""}
};

- (NSString *)stringByDecodingHHYLEntities {
	NSUInteger myLength = [self length];
	NSUInteger ampIndex = [self rangeOfString:@"&" options:NSLiteralSearch].location;
	
	// Short-circuit if there are no ampersands.
	if (ampIndex == NSNotFound) {
		return self;
	}
	// Make result string with some extra capacity.
	NSMutableString *result = [NSMutableString stringWithCapacity:(myLength * 1.25)];
	
	// First iteration doesn't need to scan to & since we did that already, but for code simplicity's sake we'll do it again with the scanner.
	NSScanner *scanner = [NSScanner scannerWithString:self];
	
	[scanner setCharactersToBeSkipped:nil];
	
	NSCharacterSet *boundaryCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@" \t\n\r;"];
	
	do {
		// Scan up to the next entity or the end of the string.
		NSString *nonEntityString;
		if ([scanner scanUpToString:@"&" intoString:&nonEntityString]) {
			[result appendString:nonEntityString];
		}
		if ([scanner isAtEnd]) {
			goto finish;
		}
		// Scan either a HHYL or numeric character entity reference.
		if ([scanner scanString:@"&amp;" intoString:NULL])
			[result appendString:@"&"];
		else if ([scanner scanString:@"&apos;" intoString:NULL])
			[result appendString:@"'"];
		else if ([scanner scanString:@"&quot;" intoString:NULL])
			[result appendString:@"\""];
		else if ([scanner scanString:@"&lt;" intoString:NULL])
			[result appendString:@"<"];
		else if ([scanner scanString:@"&gt;" intoString:NULL])
			[result appendString:@">"];
        else if ([scanner scanString:@"&nbsp;" intoString:NULL])
            [result appendString:@" "];
        else if ([scanner scanString:@"&cap;" intoString:NULL])
            [result appendString:@"∩"];
        else if ([scanner scanString:@"&middot;" intoString:NULL])
            [result appendString:@"·"];
        else if([scanner scanString:@"&rdquo;" intoString:NULL])
            [result appendString:@"”"];
        else if([scanner scanString:@"&ldquo;" intoString:NULL])
            [result appendString:@"“"];
        else if([scanner scanString:@"&lsquo;" intoString:NULL])
            [result appendString:@"‘"];
        else if([scanner scanString:@"&rsquo;" intoString:NULL])
            [result appendString:@"’"];
        else if([scanner scanString:@"&lsaquo;" intoString:NULL])
            [result appendString:@"‹"];
        else if([scanner scanString:@"&rsaquo;" intoString:NULL])
            [result appendString:@"›"];
		else if ([scanner scanString:@"&#" intoString:NULL]) {
			BOOL gotNumber;
			unsigned charCode;
			NSString *xForHex = @"";
			
			// Is it hex or decimal?
			if ([scanner scanString:@"x" intoString:&xForHex]) {
				gotNumber = [scanner scanHexInt:&charCode];
			}
			else {
				gotNumber = [scanner scanInt:(int*)&charCode];
			}
			
			if (gotNumber) {
				[result appendFormat:@"%C",(unsigned short)charCode];
				[scanner scanString:@";" intoString:NULL];
			}
			else {
				NSString *unknownEntity = @"";				
				[scanner scanUpToCharactersFromSet:boundaryCharacterSet intoString:&unknownEntity];
				[result appendFormat:@"&#%@%@", xForHex, unknownEntity];
				//[scanner scanUpToString:@";" intoString:&unknownEntity];
				//[result appendFormat:@"&#%@%@;", xForHex, unknownEntity];
				NSLog(@"Expected numeric character entity but got &#%@%@;", xForHex, unknownEntity);
			}
			
		}else{
            int count = sizeof(codeMap)/sizeof(codeMap[0]);
            BOOL found = NO;
            for( int i=0; i<count; ++i ) {
                if([scanner scanString:codeMap[i][0] intoString:NULL]){
                    [result appendString:codeMap[i][1]];
                    found = YES;
                    break;
                }
            }
            if (!found) {
                NSString *amp;
                //an isolated & symbol
                [scanner scanString:@"&" intoString:&amp];
                [result appendString:amp];
            }
        }
	}
	while (![scanner isAtEnd]);
	
finish:
	return result;
}

@end