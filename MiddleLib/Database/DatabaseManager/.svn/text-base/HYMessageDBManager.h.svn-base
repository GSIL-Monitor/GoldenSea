//
//  HYMessageDBManager.h
//  iRCS
//
//  Created by 王斌 on 15/8/31.
//  Copyright (c) 2015年 frank weng. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "HYDatabaseHelper.h"
#import "HYFMDatabase.h"
#import "HYFMDatabaseQueue.h"
#import "MessageDBModel.h"

@interface HYMessageDBManager : NSObject

// 用于数据操作的管理队列
@property (nonatomic, strong) HYFMDatabaseQueue *databaseQueue;
// 用于获取数据的数据库
@property (nonatomic, strong) HYFMDatabase *database;

+ (HYMessageDBManager *)defaultManager;
- (void)setup;

#pragma mark 增
/**
 *  根据表的名字和参数创建表
 *
 *  @param table 表的名字
 *  @param param 表的“字段”和“属性”组成的字典，都是NSString类型
 *
 *  @return 是否创建成功
 */
//- (BOOL)createTableWithParam:(NSDictionary *)param;

/**
 *  使用默认参数创建表
 *
 *  @return 是否成功
 */
- (BOOL)createTable;

/**
 *  添加一条消息记录
 *
 *  @param groupMemberModel 消息数据
 *
 *  @return 是否成功
 */
- (BOOL)addMessageInDBWithModel:(MessageDBModel *)messageModel;


#pragma mark 查
/**
 *  查询是否存在指定ID的消息，不管是否隐藏
 *
 *  @param messageID 消息ID
 *
 *  @return 是否存在
 */
- (BOOL)isExistMessageWithMessageID:(NSString *)messageID;

/**
 *  判断指定ID的消息是否被收藏
 *
 *  @param messageID 消息ID
 *
 *  @return 是否收藏
 */
- (BOOL)isCollectedMessageWithMessageID:(NSString *)messageID;

/**
 *  判断指定ID的消息是否被隐藏（软删除）
 *
 *  @param messageID 消息ID
 *
 *  @return 是否隐藏
 */
- (BOOL)isHiddenMessageWithMessageID:(NSString *)messageID;

/**
 *  获取最新的一条记录
 *
 *  @return 最新一条消息记录或者nil
 */
- (MessageDBModel *)getLastMessageInDBWithConversationUUID:(NSString *)conversationUUID;


/**
 *  获取指定会话的未读信息条数
 *
 *  @param conversationUUID 指定会话的ID
 *
 *  @return 未读信息条数
 */
- (NSInteger)getUnreadCountInDBWithConversationUUID:(NSString *)conversationUUID;

/**
 *  获取指定会话的信息条数
 *
 *  @param conversationUUID 指定会话的ID
 *
 *  @return 信息条数
 */
- (NSInteger)getReadCountInDBWithConversationUUID:(NSString *)conversationUUID;

/**
 *  获取指定会话的所有消息
 *
 *  @param conversationUUID 会话ID
 *
 *  @return 消息数组，类型为HYMessageDBModel，以时间升序排列
 */
- (NSArray *)getAllMessagesInDBWithConversationUUID:(NSString *)conversationUUID;

/**
 *  获取所有收藏消息
 *
 *  @return 消息数组
 */
- (NSArray *)getAllCollectedMessagesInDB;

/**
 *  获取指定会话的指定数量消息
 *
 *  @param conversationUUID 会话ID
 *  @param range            指定消息的范围，从1开始
 *
 *  @return 消息数组，类型为HYMessageDBModel，以时间升序排列，
 */
- (NSArray *)getMessagesInDBWithConversationUUID:(NSString *)conversationUUID Range:(NSRange)range;

/**
 *  根据消息ID获取一条消息记录
 *
 *  @param messageID 消息ID
 *
 *  @return 消息模型
 */
- (MessageDBModel *)getMessageInDBWithMssageID:(NSString *)messageID;

/**
 *  获取最近联系的8个联系号码
 *
 *  @return 号码数组
 */
- (NSArray *)getRecentContactPhoneNumbers;

#pragma mark 删
/**
 *  删除已读的阅后即焚信息
 *
 *  @param conversationID 会话UUID
 *
 *  @return 是否成功
 */
- (BOOL)deleteBurnAfterReadMessageInDBWithConversationUUID:(NSString*)conversationUUID;

/**
 *  删除指定消息,对收藏消息软删除
 *
 *  @param messageID 消息ID
 *
 *  @return 是否成功
 */
- (BOOL)deleteMessageInDBWithMessageID:(NSString *)messageID;

/**
 *  删除指定消息(不考虑是否收藏)
 *
 *  @param messageID 消息ID
 *
 *  @return 是否成功
 */
- (BOOL)forceDeleteMessageInDBWithMessageID:(NSString *)messageID;

/**
 *  删除指定会话中的所有消息
 *
 *  @param conversationUUID 会话ID
 *
 *  @return 是否成功
 */
- (BOOL)deleteMessageInDBWithConversationUUID:(NSString *)conversationUUID;

/**
 *  删除指定消息,不删除相关文件
 *
 *  @param messageID 消息ID
 *
 *  @return 是否成功
 */
- (BOOL)deleteMessageWithoutFileInDBWithMessageID:(NSString *)messageID;

#pragma mark 改
/**
 *  将指定会话中的所有消息设为已读
 *
 *  @param conversationUUID 指定会话ID
 *
 *  @return 是否成功
 */
- (BOOL)setReadWithUUID:(NSString *)conversationUUID;

/**
 *  将指定消息设为已读
 *
 *  @param messageID 指定消息的ID
 *
 *  @return 是否成功
 */
- (BOOL)setReadWithMessageID:(NSString *)messageID;
/**
 *  将所有消息设为已读
 *
 *  @return 是否成功
 */
- (BOOL)setAllRead;

/**
 *  收藏指定ID的消息
 *
 *  @param messageID 消息ID
 *
 *  @return 是否收藏成功
 */
- (BOOL)setCollectedWithMessageID:(NSString *)messageID;
- (BOOL)setUncollectedWithMessageID:(NSString *)messageID;
/**
 *  修改指定消息的状态
 *
 *  @param message       消息模型
 *  @param messageStatus 状态信息
 *
 *  @return 是否成功
 */
- (BOOL)updateMessage:(MessageDBModel *)message Status:(HYMessageStatus)messageStatus;
- (BOOL)updateMediaMessage:(MessageDBModel *)message Status:(HYMessageStatus)messageStatus;



@end
