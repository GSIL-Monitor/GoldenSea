//
//  HYMessageDBManager.m
//  iRCS
//
//  Created by 王斌 on 15/8/31.
//  Copyright (c) 2015年 frank weng. All rights reserved.
//

#import "HYMessageDBManager.h"

@interface HYMessageDBManager()

@property (nonatomic, strong) HYDatabaseHelper *dbHelper;

@end

@implementation HYMessageDBManager

SINGLETON_GENERATOR(HYMessageDBManager, defaultManager)

- (id)init
{
    self = [super init];
    return self;
}

- (void)setup
{
    self.dbHelper = [HYDatabaseHelper defaultHelper];
    self.database = self.dbHelper.database;
    self.databaseQueue = self.dbHelper.databaseQueue;
}

#pragma mark 增
- (BOOL)createTable
{
    NSDictionary *param = @{@"messageID": @"text primary key",
                            @"conversationUUID": @"text",
                            @"conversationType": @"integer",
                            @"timeStamp": @"integer",
                            @"isSender": @"bool",
                            @"senderID": @"text",
                            @"receiverID": @"text",
                            @"messageStatus": @"integer",
                            @"messageType": @"integer",
                            @"isRead": @"bool",
                            @"isBurnAfterRead": @"bool",
                            @"isCollected": @"bool",
                            @"isHide":@"bool",
                            @"content": @"text",
                            @"planSendTime": @"integer",
                            @"originalURL": @"text",
                            @"thumbnailURL": @"text",
                            @"smallURL": @"text",
                            @"filePath": @"text",
                            @"thumbnailPath": @"text",
                            @"fileLength": @"integer",
                            @"fileName": @"text",
                            @"duration": @"text",
                            @"width": @"integer",
                            @"height": @"integer",
                            @"longitude": @"text",
                            @"latitude": @"text",
                            @"locationDesc": @"text",
                            @"thread": @"text",
                            @"extraInfo": @"text"};
    return [self.dbHelper creatTableWithTable:MESSAGE_TABLE Param:param];
}

- (BOOL)addMessageInDBWithModel:(MessageDBModel *)messageModel
{
    if (!messageModel) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
            NSString *sql = [NSString stringWithFormat:@"insert into %@ (messageID,conversationUUID,conversationType,timeStamp,isSender,senderID,receiverID,messageStatus,messageType,isRead,isBurnAfterRead,isCollected,isHide,content,planSendTime,originalURL,thumbnailURL,smallURL,filePath,thumbnailPath,fileLength,fileName,duration,width,height,longitude,latitude,locationDesc,thread,extraInfo) values('%@','%@','%u','%ld','%d','%@','%@','%u','%u','%d','%d','%d','%d','%@','%ld','%@','%@','%@','%@','%@','%ld','%@','%@','%ld','%ld','%@','%@','%@','%@','%@')",MESSAGE_TABLE,messageModel.messageID,messageModel.conversationUUID,messageModel.conversationType,(long)messageModel.timeStamp,messageModel.isSender,messageModel.senderID,messageModel.receiverID,messageModel.messageStatus,messageModel.messageType,messageModel.isRead,messageModel.isBurnAfterRead,messageModel.isCollected,messageModel.isHide,messageModel.content,(long)messageModel.planSendTime,messageModel.originalURL,messageModel.thumbnailURL,messageModel.smallURL,messageModel.filePath,messageModel.thumbnailPath,(long)messageModel.fileLength,messageModel.fileName,messageModel.duration,(long)messageModel.width,(long)messageModel.height,messageModel.longitude,messageModel.latitude,messageModel.locationDesc,messageModel.thread,messageModel.extraInfo];
            rst = [db executeUpdate:sql];
    }];
    return rst;
}


#pragma mark 查
- (BOOL)isExistMessageWithMessageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select * from %@ where messageID = '%@'",MESSAGE_TABLE,messageID];
        
        HYFMResultSet * rs = [db executeQuery:sql];
        if ([rs next]) {
            rst = YES;
        }
        [rs close];
    }];
    return rst;
}

- (BOOL)isCollectedMessageWithMessageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;

    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select isCollected from %@ where messageID = '%@'",MESSAGE_TABLE,messageID];
        
        HYFMResultSet * rs = [db executeQuery:sql];
        if ([rs next]) {
            rst = [rs boolForColumnIndex:0];
        }
        [rs close];
    }];
    return rst;

}

- (BOOL)isHiddenMessageWithMessageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;

    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select isHide from %@ where messageID = '%@'",MESSAGE_TABLE,messageID];
        
        HYFMResultSet * rs = [db executeQuery:sql];
        if ([rs next]) {
            rst = [rs boolForColumnIndex:0];
        }
        [rs close];
    }];
    return rst;

}

- (NSInteger)lastTimeStampWithConversationUUID:(NSString *)conversationUUID
{
    if (!conversationUUID) {
        DDLogError(@"DB parameter nil");
        return DB_INPUT_NIL;
    }
    __block NSInteger timeStamp = 0;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select max(timeStamp) from %@ where conversationUUID = '%@' and isHide = '0'",MESSAGE_TABLE,conversationUUID];
        HYFMResultSet * rs = [db executeQuery:sql];
        if ([rs next]) {
            timeStamp = [rs intForColumnIndex:0];
        }
        [rs close];
    }];
    return timeStamp;
}


- (MessageDBModel *)getLastMessageInDBWithConversationUUID:(NSString *)conversationUUID
{
    if (!conversationUUID) {
        DDLogError(@"DB parameter nil");
        return nil;
    }
    __block NSInteger lastTimeStamp = [self lastTimeStampWithConversationUUID:conversationUUID];
    __block MessageDBModel *model = nil;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select * from %@ where conversationUUID = '%@' and timeStamp = '%ld'",MESSAGE_TABLE,conversationUUID,(long)lastTimeStamp];
        HYFMResultSet *rs = [db executeQuery:sql];
        if ([rs next]) {
            model = [[MessageDBModel alloc]init];
            model.messageID        = [rs stringForColumn:@"messageID"];
            model.conversationUUID = [rs stringForColumn:@"conversationUUID"];
            model.conversationType = [rs intForColumn:@"conversationType"];
            model.timeStamp        = [rs longForColumn:@"timeStamp"];
            model.planSendTime     = [rs longForColumn:@"planSendTime"];
            model.isSender         = [rs boolForColumn:@"isSender"];
            model.senderID         = [rs stringForColumn:@"senderID"];
            model.receiverID       = [rs stringForColumn:@"receiverID"];
            model.messageType      = [rs intForColumn:@"messageType"];
            model.messageStatus    = [rs intForColumn:@"messageStatus"];
            model.isBurnAfterRead  = [rs boolForColumn:@"isBurnAfterRead"];
            model.isRead           = [rs boolForColumn:@"isRead"];
            model.isHide           = NO;
            model.isCollected      = [rs boolForColumn:@"isCollected"];
            model.content          = [rs stringForColumn:@"content"];
            model.originalURL      = [rs stringForColumn:@"originalURL"];
            model.thumbnailURL     = [rs stringForColumn:@"thumbnailURL"];
            model.smallURL         = [rs stringForColumn:@"smallURL"];
            model.filePath         = [rs stringForColumn:@"filePath"];
            model.thumbnailPath    = [rs stringForColumn:@"thumbnailPath"];
            model.fileLength       = [rs intForColumn:@"fileLength"];
            model.fileName         = [rs stringForColumn:@"fileName"];
            model.duration         = [rs stringForColumn:@"duration"];
            model.longitude        = [rs stringForColumn:@"longitude"];
            model.latitude         = [rs stringForColumn:@"latitude"];
            model.height           = [rs intForColumn:@"height"];
            model.width            = [rs intForColumn:@"width"];
            model.locationDesc     = [rs stringForColumn:@"locationDesc"];
            model.extraInfo        = [rs stringForColumn:@"extraInfo"];
        }
        [rs close];
    }];
    return model;
}

- (NSInteger)getUnreadCountInDBWithConversationUUID:(NSString *)conversationUUID
{
    if (!conversationUUID) {
        DDLogError(@"DB parameter nil");
        return DB_INPUT_NIL;
    }
    __block NSInteger count = 0;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select count(messageID) from %@ where conversationUUID = '%@' and isRead = '0' and isHide = '0'",MESSAGE_TABLE,conversationUUID];
        HYFMResultSet *rs = [db executeQuery:sql];
        if ([rs next]) {
            count = [rs intForColumnIndex:0];
        }
        [rs close];
    }];
    return count;

}

- (NSInteger)getReadCountInDBWithConversationUUID:(NSString *)conversationUUID
{
    if (!conversationUUID) {
        DDLogError(@"DB parameter nil");
        return DB_INPUT_NIL;
    }
    __block NSInteger count = 0;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select count(messageID) from %@ where conversationUUID = '%@' and isRead = '1' and isHide = '0'",MESSAGE_TABLE,conversationUUID];
        HYFMResultSet *rs = [db executeQuery:sql];
        if ([rs next]) {
            count = [rs intForColumnIndex:0];
        }
        [rs close];
    }];
    return count;
}

- (NSArray *)getAllMessagesInDBWithConversationUUID:(NSString *)conversationUUID
{
    if (!conversationUUID) {
        DDLogError(@"DB parameter nil");
        return nil;
    }
    __block NSMutableArray *msgArray = nil;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select * from %@ where conversationUUID = '%@' and isHide = '0' order by timeStamp asc",MESSAGE_TABLE,conversationUUID];
        HYFMResultSet *rs = [db executeQuery:sql];
        while ([rs next]) {
            if (!msgArray) {
                msgArray = [[NSMutableArray alloc]init];
            }
            MessageDBModel *model = [[MessageDBModel alloc]init];
            model.messageID        = [rs stringForColumn:@"messageID"];
            model.conversationUUID = [rs stringForColumn:@"conversationUUID"];
            model.conversationType = [rs intForColumn:@"conversationType"];
            model.timeStamp        = [rs longForColumn:@"timeStamp"];
            model.planSendTime     = [rs longForColumn:@"planSendTime"];
            model.isSender         = [rs boolForColumn:@"isSender"];
            model.senderID         = [rs stringForColumn:@"senderID"];
            model.receiverID       = [rs stringForColumn:@"receiverID"];
            model.messageType      = [rs intForColumn:@"messageType"];
            model.messageStatus    = [rs intForColumn:@"messageStatus"];
            model.isBurnAfterRead  = [rs boolForColumn:@"isBurnAfterRead"];
            model.isRead           = [rs boolForColumn:@"isRead"];
            model.isCollected      = [rs boolForColumn:@"isCollected"];
            model.isHide           = NO;
            model.content          = [rs stringForColumn:@"content"];
            model.originalURL      = [rs stringForColumn:@"originalURL"];
            model.thumbnailURL     = [rs stringForColumn:@"thumbnailURL"];
            model.smallURL         = [rs stringForColumn:@"smallURL"];
            model.filePath         = [rs stringForColumn:@"filePath"];
            model.thumbnailPath    = [rs stringForColumn:@"thumbnailPath"];
            model.fileLength       = [rs intForColumn:@"fileLength"];
            model.fileName         = [rs stringForColumn:@"fileName"];
            model.duration         = [rs stringForColumn:@"duration"];
            model.longitude        = [rs stringForColumn:@"longitude"];
            model.latitude         = [rs stringForColumn:@"latitude"];
            model.height           = [rs intForColumn:@"height"];
            model.width            = [rs intForColumn:@"width"];
            model.locationDesc     = [rs stringForColumn:@"locationDesc"];
            model.extraInfo        = [rs stringForColumn:@"extraInfo"];
            
            [msgArray addObject:model];
        }
        [rs close];
    }];
    return [msgArray copy];
}

- (NSArray *)getAllCollectedMessagesInDB
{
    __block NSMutableArray *msgArray = nil;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select * from %@ where isCollected = '1' order by timeStamp asc",MESSAGE_TABLE];
        HYFMResultSet *rs = [db executeQuery:sql];
        while ([rs next]) {
            if (!msgArray) {
                msgArray = [[NSMutableArray alloc]init];
            }
            MessageDBModel *model = [[MessageDBModel alloc]init];
            model.messageID        = [rs stringForColumn:@"messageID"];
            model.conversationUUID = [rs stringForColumn:@"conversationUUID"];
            model.conversationType = [rs intForColumn:@"conversationType"];
            model.timeStamp        = [rs longForColumn:@"timeStamp"];
            model.planSendTime     = [rs longForColumn:@"planSendTime"];
            model.isSender         = [rs boolForColumn:@"isSender"];
            model.senderID         = [rs stringForColumn:@"senderID"];
            model.receiverID       = [rs stringForColumn:@"receiverID"];
            model.messageType      = [rs intForColumn:@"messageType"];
            model.messageStatus    = [rs intForColumn:@"messageStatus"];
            model.isBurnAfterRead  = [rs boolForColumn:@"isBurnAfterRead"];
            model.isRead           = [rs boolForColumn:@"isRead"];
            model.isCollected      = YES;
            model.isHide           = [rs boolForColumn:@"isHide"];
            model.content          = [rs stringForColumn:@"content"];
            model.originalURL      = [rs stringForColumn:@"originalURL"];
            model.thumbnailURL     = [rs stringForColumn:@"thumbnailURL"];
            model.smallURL         = [rs stringForColumn:@"smallURL"];
            model.filePath         = [rs stringForColumn:@"filePath"];
            model.thumbnailPath    = [rs stringForColumn:@"thumbnailPath"];
            model.fileLength       = [rs intForColumn:@"fileLength"];
            model.fileName         = [rs stringForColumn:@"fileName"];
            model.duration         = [rs stringForColumn:@"duration"];
            model.longitude        = [rs stringForColumn:@"longitude"];
            model.latitude         = [rs stringForColumn:@"latitude"];
            model.height           = [rs intForColumn:@"height"];
            model.width            = [rs intForColumn:@"width"];
            model.locationDesc     = [rs stringForColumn:@"locationDesc"];
            model.extraInfo        = [rs stringForColumn:@"extraInfo"];
            
            [msgArray addObject:model];
        }
        [rs close];
    }];
    return [msgArray copy];
}

- (NSArray *)getMessagesInDBWithConversationUUID:(NSString *)conversationUUID Range:(NSRange)range
{
    if (!conversationUUID) {
        DDLogError(@"DB parameter nil");
        return nil;
    }
    __block NSMutableArray *msgArray = nil;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        //rowid的作用就是如时间戳一样，那么按照写入数据库的时间的逆序排序
        NSString *sql = [NSString stringWithFormat:@"select *,rowid from %@ where conversationUUID = '%@' and isHide = '0' order by timeStamp desc,rowid desc limit '%lu' offset '%lu'",MESSAGE_TABLE,conversationUUID,(unsigned long)range.length,range.location];
        HYFMResultSet *rs = [db executeQuery:sql];
        while ([rs next]) {
            if (!msgArray) {
                msgArray = [[NSMutableArray alloc]init];
            }
            MessageDBModel *model = [[MessageDBModel alloc]init];
            model.messageID        = [rs stringForColumn:@"messageID"];
            model.conversationUUID = [rs stringForColumn:@"conversationUUID"];
            model.conversationType = [rs intForColumn:@"conversationType"];
            model.timeStamp        = [rs longForColumn:@"timeStamp"];
            model.planSendTime     = [rs longForColumn:@"planSendTime"];
            model.isSender         = [rs boolForColumn:@"isSender"];
            model.senderID         = [rs stringForColumn:@"senderID"];
            model.receiverID       = [rs stringForColumn:@"receiverID"];
            model.messageType      = [rs intForColumn:@"messageType"];
            model.messageStatus    = [rs intForColumn:@"messageStatus"];
            model.isBurnAfterRead  = [rs boolForColumn:@"isBurnAfterRead"];
            model.isRead           = [rs boolForColumn:@"isRead"];
            model.isCollected      = [rs boolForColumn:@"isCollected"];
            model.isHide           = NO;
            model.content          = [rs stringForColumn:@"content"];
            model.originalURL      = [rs stringForColumn:@"originalURL"];
            model.thumbnailURL     = [rs stringForColumn:@"thumbnailURL"];
            model.smallURL         = [rs stringForColumn:@"smallURL"];
            model.filePath         = [rs stringForColumn:@"filePath"];
            model.thumbnailPath    = [rs stringForColumn:@"thumbnailPath"];
            model.fileLength       = [rs intForColumn:@"fileLength"];
            model.fileName         = [rs stringForColumn:@"fileName"];
            model.duration         = [rs stringForColumn:@"duration"];
            model.longitude        = [rs stringForColumn:@"longitude"];
            model.latitude         = [rs stringForColumn:@"latitude"];
            model.height           = [rs intForColumn:@"height"];
            model.width            = [rs intForColumn:@"width"];
            model.locationDesc     = [rs stringForColumn:@"locationDesc"];
            model.extraInfo        = [rs stringForColumn:@"extraInfo"];
            
            [msgArray insertObject:model atIndex:0];
        }
        [rs close];
    }];
    return [msgArray copy];
}

- (MessageDBModel *)getMessageInDBWithMssageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return nil;
    }
    __block MessageDBModel *model = nil;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"select * from %@ where messageID = '%@'",MESSAGE_TABLE,messageID];
        HYFMResultSet *rs = [db executeQuery:sql];
        if ([rs next]) {
            model = [[MessageDBModel alloc]init];
            model.messageID        = [rs stringForColumn:@"messageID"];
            model.conversationUUID = [rs stringForColumn:@"conversationUUID"];
            model.conversationType = [rs intForColumn:@"conversationType"];
            model.timeStamp        = [rs longForColumn:@"timeStamp"];
            model.planSendTime     = [rs longForColumn:@"planSendTime"];
            model.isSender         = [rs boolForColumn:@"isSender"];
            model.senderID         = [rs stringForColumn:@"senderID"];
            model.receiverID       = [rs stringForColumn:@"receiverID"];
            model.messageType      = [rs intForColumn:@"messageType"];
            model.messageStatus    = [rs intForColumn:@"messageStatus"];
            model.isBurnAfterRead  = [rs boolForColumn:@"isBurnAfterRead"];
            model.isRead           = [rs boolForColumn:@"isRead"];
            model.isCollected      = [rs boolForColumn:@"isCollected"];
            model.isHide           = [rs boolForColumn:@"isHide"];
            model.content          = [rs stringForColumn:@"content"];
            model.originalURL      = [rs stringForColumn:@"originalURL"];
            model.thumbnailURL     = [rs stringForColumn:@"thumbnailURL"];
            model.smallURL         = [rs stringForColumn:@"smallURL"];
            model.filePath         = [rs stringForColumn:@"filePath"];
            model.thumbnailPath    = [rs stringForColumn:@"thumbnailPath"];
            model.fileLength       = [rs intForColumn:@"fileLength"];
            model.fileName         = [rs stringForColumn:@"fileName"];
            model.duration         = [rs stringForColumn:@"duration"];
            model.longitude        = [rs stringForColumn:@"longitude"];
            model.latitude         = [rs stringForColumn:@"latitude"];
            model.height           = [rs intForColumn:@"height"];
            model.width            = [rs intForColumn:@"width"];
            model.locationDesc     = [rs stringForColumn:@"locationDesc"];
            model.extraInfo        = [rs stringForColumn:@"extraInfo"];
        }
        [rs close];
    }];
    return model;

}

- (NSArray *)getRecentContactPhoneNumbers{
    __block NSMutableArray *phoneNumArray = [NSMutableArray array];
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"SELECT receiverID FROM %@ WHERE conversationType = %d GROUP BY receiverID ORDER BY timeStamp DESC LIMIT 8",MESSAGE_TABLE, HYConversationType_One_to_One];
        HYFMResultSet *rs = [db executeQuery:sql];
        while ([rs next]) {
            NSString *UserID = [rs stringForColumn:@"receiverID"];
            if ([UserID isValidString]) {
                [phoneNumArray safeAddObject:UserID];
            }
        }
        [rs close];
    }];
    return phoneNumArray;
}



#pragma mark 删
- (BOOL)deleteBurnAfterReadMessageInDBWithConversationUUID:(NSString *)conversationUUID
{
    if (!conversationUUID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
             NSString *sql = [NSString stringWithFormat:@"delete from %@ where conversationUUID = '%@' and isBurnAfterRead = '1' and isRead = '1'",MESSAGE_TABLE,conversationUUID];
            
            rst = [db executeUpdate:sql];
    }];
    return rst;
}

- (BOOL)deleteMessageInDBWithMessageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    MessageDBModel *message = [self getMessageInDBWithMssageID:messageID];
    if (message) {
        BOOL isCollected = message.isCollected;
        if (isCollected) {
            [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
                NSString *sql = nil;
                sql = [NSString stringWithFormat:@"update %@ set isHide = '1' where messageID = '%@'",MESSAGE_TABLE,messageID];
                rst = [db executeUpdate:sql];
            }];
        }else{
            rst = [self forceDeleteMessageInDBWithMessageID:messageID];
        }
    }
    
    return rst;
}

- (BOOL)forceDeleteMessageInDBWithMessageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    MessageDBModel *message = [self getMessageInDBWithMssageID:messageID];
    if (message) {
        [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
            NSString *sql = nil;
            if ([message.filePath isValidString]) {
                NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES) objectAtIndex:0];
                NSString *filePath = [NSString stringWithFormat:@"%@/%@",documentPath,message.filePath];
                NSError *error;
                [[NSFileManager defaultManager]removeItemAtPath:filePath error:&error];
                if (error) {
                    DDLogError(@"Delete file error：%@",[error localizedDescription]);
                }
            }
            if ([message.thumbnailPath isValidString]) {
                NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES) objectAtIndex:0];
                NSString *filePath = [NSString stringWithFormat:@"%@/%@",documentPath,message.thumbnailPath];
                NSError *error;
                [[NSFileManager defaultManager]removeItemAtPath:filePath error:&error];
                if (error) {
                    DDLogError(@"Delete file error：%@",[error localizedDescription]);
                }
            }
            sql = [NSString stringWithFormat:@"delete from %@ where messageID = '%@'",MESSAGE_TABLE,messageID];
            rst = [db executeUpdate:sql];
        }];
    }
    return rst;

}

- (BOOL)deleteMessageWithoutFileInDBWithMessageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    MessageDBModel *message = [self getMessageInDBWithMssageID:messageID];
    
    if (message) {
        BOOL isCollected = message.isCollected;
        [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
            NSString *sql = nil;
            if (isCollected) {
                sql = [NSString stringWithFormat:@"update %@ set isHide = '1' where messageID = '%@'",MESSAGE_TABLE,messageID];
            }else{
                sql = [NSString stringWithFormat:@"delete from %@ where messageID = '%@'",MESSAGE_TABLE,messageID];
            }
            rst = [db executeUpdate:sql];
        }];
    }
    return rst;

}

- (BOOL)deleteMessageInDBWithConversationUUID:(NSString *)conversationUUID
{
    if (!conversationUUID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    NSArray *messages = [self getAllMessagesInDBWithConversationUUID:conversationUUID];
    
    if (messages.count == 0) {
        rst = YES;
        return rst;
    }
    
    for (MessageDBModel *dbModel in messages) {
        rst = [self deleteMessageInDBWithMessageID:dbModel.messageID];
    }
    return rst;
}

#pragma mark 改
- (BOOL)setReadWithUUID:(NSString *)conversationUUID
{
    if (!conversationUUID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        
        NSString *sql = [NSString stringWithFormat:@"update %@ set isRead = '1' where conversationUUID = '%@'",MESSAGE_TABLE,conversationUUID];
        rst = [db executeUpdate:sql];
        
    }];
    return rst;
}

- (BOOL)setReadWithMessageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        
        NSString *sql = [NSString stringWithFormat:@"update %@ set isRead = '1' where messageID = '%@'",MESSAGE_TABLE,messageID];
        rst = [db executeUpdate:sql];
        
    }];
    return rst;
}

- (BOOL)setAllRead
{
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        
        NSString *sql = [NSString stringWithFormat:@"update %@ set isRead = '1' where  isRead = '0'",MESSAGE_TABLE];
        rst = [db executeUpdate:sql];
        
    }];
    return rst;
}

- (BOOL)setCollectedWithMessageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        
        NSString *sql = [NSString stringWithFormat:@"update %@ set isCollected = '1' where  messageID = '%@'",MESSAGE_TABLE,messageID];
        rst = [db executeUpdate:sql];
        
    }];
    return rst;
}

- (BOOL)setUncollectedWithMessageID:(NSString *)messageID
{
    if (!messageID) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        NSString *sql = [NSString stringWithFormat:@"update %@ set isCollected = '0' where  messageID = '%@'",MESSAGE_TABLE,messageID];
        rst = [db executeUpdate:sql];
    }];
    
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        if ([self isHiddenMessageWithMessageID:messageID]) {
            [self forceDeleteMessageInDBWithMessageID:messageID];
        }
    });
    return rst;
}


- (BOOL)updateMessage:(MessageDBModel *)message Status:(HYMessageStatus)messageStatus
{
    if (!message || messageStatus == 0) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        
        NSString *sql = [NSString stringWithFormat:@"update %@ set messageStatus = %d where  messageID = '%@'",MESSAGE_TABLE,messageStatus,message.messageID];
        rst = [db executeUpdate:sql];
        
    }];
    return rst;
}

- (BOOL)updateMediaMessage:(MessageDBModel *)message Status:(HYMessageStatus)messageStatus
{
    if (!message || messageStatus == 0) {
        DDLogError(@"DB parameter nil");
        return NO;
    }
    
    __block BOOL rst = NO;
    [self.databaseQueue inDatabase:^(HYFMDatabase *db) {
        
        NSString *sql = [NSString stringWithFormat:@"update %@ set messageStatus = '%d',originalURL = '%@',thumbnailURL = '%@',smallURL = '%@',filePath = '%@',thumbnailPath = '%@',fileLength = '%ld',fileName = '%@',duration = '%@',width = '%ld',height = '%ld',longitude = '%@',latitude = '%@',locationDesc = '%@',extraInfo = '%@' where messageID = '%@'",MESSAGE_TABLE,messageStatus,message.originalURL,message.thumbnailURL,message.smallURL,message.filePath,message.thumbnailPath,message.fileLength,message.fileName,message.duration,message.width,message.height,message.longitude,message.latitude,message.locationDesc,message.extraInfo,message.messageID];
        rst = [db executeUpdate:sql];
        
    }];
    return rst;

}



@end
