//
//  HYConversationDBManager.h
//  iRCS
//
//  Created by 王斌 on 15/8/28.
//  Copyright (c) 2015年 frank weng. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "HYDatabaseHelper.h"
#import "HYFMDatabase.h"
#import "HYFMDatabaseQueue.h"
#import "ConversationDBModel.h"

@class MessageDBModel;
@interface HYConversationDBManager : NSObject

// 用于数据操作的管理队列
@property (nonatomic, strong) HYFMDatabaseQueue *databaseQueue;
// 用于获取数据的数据库
@property (nonatomic, strong) HYFMDatabase *database;

- (void)setup;
+ (HYConversationDBManager *)defaultManager;
#pragma mark 增
/**
 *  根据表的名字和参数创建表
 *
 *  @param table 表的名字
 *  @param param 表的“字段”和“属性”组成的字典，都是NSString类型
 *
 *  @return 是否创建成功
 */
//- (BOOL)createTableWithParam:(NSDictionary *)param;

/**
 *  使用默认参数创建数据表
 *
 *  @return 是否成功
 */
- (BOOL)createTable;

/**
 *  添加一条会话记录
 *
 *  @param conversationModel 会话数据
 *
 *  @return 是否成功
 */
- (BOOL)addConversationInDBWithModel:(ConversationDBModel *)conversationModel;

/**
 *  添加一条会话记录，如果相同id的记录已经存在，那么将其状态设为不隐藏，并更新状态；如果相同id不存在，那么添加一条记录到数据库
 *
 *  @param messageDBModel 消息数据
 *
 *  @return 是否成功
 */
- (BOOL)addConversationInDBWithMessageDBModel:(MessageDBModel *)messageDBModel;


#pragma mark 查
/**
 *  判断指定会话是否存在
 *
 *  @param conversationUUID 会话ID
 *
 *  @return 是否存在
 */
- (BOOL)isExistConversationWithUUID:(NSString *)conversationUUID;

/**
 *  获取所有会话，置顶消息会话在前，不包含被隐藏的会话
 *
 *  @return 会话列表
 */
- (NSArray *)getAllConversationInDB;

/**
 *  根据会话ID获取相应的会话
 *
 *  @param conversationUUID 会话ID
 *
 *  @return 会话
 */
- (ConversationDBModel *)getConversationInDBWithUUID:(NSString *)conversationUUID;

/**
 *  根据会话ID获取相应的聊天对象ID
 *
 *  @param conversationUUID 会话ID
 *
 *  @return 聊天对象ID，如果是群聊，那么返回群ID
 */
- (NSString *)getToUserIDInDBWithUUID:(NSString *)conversationUUID;

#pragma mark 改
/**
 *  更新单个消息会话
 *
 *  @param conversation 会话信息
 *
 *  @return 是否成功
 */
- (BOOL)updateConversationInDB:(ConversationDBModel*)conversation;


//-(BOOL)updateConversationInDB:(HYMessageDBModel *)message;


/**
 *  会话置顶显示
 *
 *  @param conversationUUID 指定会话ID
 *
 *  @return 是否成功
 */
- (BOOL)appearAtTheTopWithUUID:(NSString *)conversationUUID;

/**
 *  会话非置顶显示
 *
 *  @param conversationUUID 指定会话ID
 *
 *  @return 是否成功
 */
- (BOOL)appearNormallyWithUUID:(NSString *)conversationUUID;

/**
 *  提醒消息
 *
 *  @param conversationUUID 指定会话ID
 *
 *  @return 是否成功
 */
- (BOOL)policyWith:(NSString *)conversationUUID;

/**
 *  不提醒消息
 *
 *  @param conversationUUID 指定会话ID
 *
 *  @return 是否成功
 */
- (BOOL)notPolicyWith:(NSString *)conversationUUID;

/**
 *  将指定会话中的所有消息设为已读
 *
 *  @param conversationUUID 指定会话ID
 *
 *  @return 是否成功
 */
- (BOOL)setReadWithUUID:(NSString *)conversationUUID;

/**
 *  将所有消息设为已读
 *
 *  @return 是否成功
 */
- (BOOL)setAllRead;

#pragma mark 删
/**
 *  删除指定消息会话
 *
 *  @param conversationUUID 会话的UUID
 *
 *  @return 是否成功
 */
- (BOOL)deleteConversationInDBWithUUID:(NSString*)conversationUUID;


@end
